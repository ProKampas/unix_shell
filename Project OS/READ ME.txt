			ΑΡΙΣΤΟΤΕΛΕΙΟ ΠΑΝΕΠΙΣΤΗΜΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ
					ΠΟΛΥΤΕΧΝΙΚΗ ΣΧΟΛΗ
  	  ΤΜΗΜΑ ΗΛΕΚΤΡΟΛΟΓΩΝ ΜΗΧΑΝΙΚΩΝ ΚΑΙ ΜΗΧΑΝΙΚΩΝ ΥΠΟΛΟΓΙΣΤΩΝ
			ΤΟΜΕΑΣ ΗΛΕΚΤΡΟΝΙΚΗΣ ΚΑΙ ΥΠΟΛΟΓΙΣΤΩΝ

					  7ο ΕΞΑΜΗΝΟ 
		   ΕΡΓΑΣΙΑ ΣΤΟ ΜΑΘΗΜΑ ΛΕΙΤΟΥΡΓΙΚΑ ΣΥΣΤΗΜΑΤΑ

ΦΟΙΤΗΤΗΣ :  ΚΑΜΠΑΣ ΠΡΟΔΡΟΜΟΣ			e-mail: pskampas@ece.auth.gr
	ΑΕΜ :  xxxx



   Η εργασία αφορά την υλοποίηση ενός κελύφους σε περιβάλλον linux το οποίο θα πρέπει
να τρέχει σε 2 λειτουργίες, batch και interactive. Στον κώδικα υλοποιήθηκε πρώτα το 
batch mode και στη συνέχεια το interactive.



					ΑΝΑΛΥΣΗ ΤΟΥ ΚΩΔΙΚΑ

 ---BATCH MODE----

- Στην αρχή του κώδικα ελέγχεται  αριθμός των ορισμάτων. Αν είναι μεγαλύτερος από 2 το 
πρόγραμμα τερματίζει. Αν υπάρχει 1 όρισμα μόνο( δηλαδή μόνο το ./Project_OS και εκτελείται
to interactive mode ενώ με 2 ορίσματα (δηλαδή ./Project_OS Project_OS.txt) εκτελείται το 
batch mode.

- Στη συνέχεια ελέγχεται εάν το αρχείο .txt που δόθηκε ως όρισμα υπάρχει(χρήση της συνάρτησης
access()), είναι άδειο(μόλις ανοίξει το αρχείο με την fopen() ελέγχεται εάν υπάρχει κάποιος χαρακτήρας)
και τέλος ελέγχεται εάν έχει την επέκταση.txt .Αν δεν υπάρχει γίνεται χρήση της συνάρτησης rename() για 
να προστεθεί.  

- Βρίσκεται ο αριθμός των γραμμών του αρχείου και ο pointer επαναφέρεται στην αρχή του αρχείου
(χρήση της rewind(fp)).

- Για κάθε μία γραμμή ορίζονται αρκετές μεταβλητές, οι σημαντικότερες από τις οποίες είναι οι πίνακες
tokens[170][200] και tokens_command[170][200]. Κάθε γραμμή μέσα στο αρχείο μπορεί να περιέχει μέχρι
512 χαρακτήρες.Γι'αυτό, ορίστηκε ο πίνακας line[513](μία θέση παραπάνω για το '\0').Η μικρότερη εντολή
στο linux shell είναι 2 χαρακτήρες.Μαζί με το χαρακτήρα ';' συνολικά 3. Άρα ο μέγιστος αριθμός εντολών
είναι 512:3 ~170. Για κάθε μία εντολή δόθηκε ένας μέγιστος αριθμός χαρακτήρων 200. 
 *Ο πίνακας tokens[][] περιέχει σε κάθε γραμμή του κάθε εντολή, ακριβώς όπως υπάρχει μέσα στο αρχείο.
 *Ο πίνακας tokens_command[][] περιέχει σε κάθε γραμμή την ίδια εντολή,με τη διαφορά ότι τα ορίσματα 
απέχουν μεταξύ τους ένα κενό χαρακτήρα,μορφοποίηση που έγινε ώστε να γνωρίζουμε ακριβώς τη θέση των
ορισμάτων. Και οι 2 πριν χρησιμοποιηθούν μηδενίζονται.

- Με τη χρήση της strtok() χωρίζονται οι επιμέρους εντολές της γραμμής και καταχωρούνται στον tokens[][]
μέσα σε μία while(1) μέχρι να μην υπάρχουν άλλα tokens.

- Για κάθε γραμμή γίνεται έλεγχος για την ύπαρξη της εντολήςε quit. Για το λόγο αυτό, υπάρχει μια σημαία
quit_flag αρχικοποιημένοι στο -1. Σε όποιο token υπάρχει η quit, η σημαία παίρνει τον αντίστοιχο αριθμό.

- Στη γραμμή 190 ξεκινά ένας βρόχος επανάληψης για όλα τα tokens που βρέθηκαν στη γραμμή(κενά και μη)
και στη γραμμή 210 η εμφωλευμένη επανάληψη για κάθε token (η επανάληψη γίνεται για όλα τους χαρακτήρες).

 * Πριν τη δεύτερη επανάληψη μηδενίζεται κάθε φορά η μεταβλητή counter,η οποία μετράει τον αριθμό των 
white characters στο token. Αν ο αριθμός αυτός είναι ίσος με το μέγεθος του token τότε είναι κενό(και
μειώνεται το d κατά ένα).

 * Στις γραμμές 245-268 γίνεται η εξαγωγή της εντολής από το κάθε token.
--Όταν flag=0 εξετάζουμε την εντολή ενώ για flag=1 τα ορίσματά της.

--Εάν ο counter<k+1 δηλαδή από την πρώτη φορά που δεν θα βρεθεί white character μέχρι και την πρώτη φορά
που θα εμφανιστεί εκ νέου κάποιος white character, όλοι οι ενδιάμεσοι χαρακτήρες αποθηκεύονται στoν 
tokens_command[][].

 * Στις γραμμές 270-300 γίνεται η εξαγωγή των ορισμάτων από το κάθε token.
--Εάν ο counter=k δηλαδή όσο βρίσκεται κάποιος white character δεν γράφεται τίποτα. Όσο counter<k όλοι 
οι ενδιάμεσοι χαρακτήρες αποθηκεύονται στoν tokens_command[][] αφήνονοντας ένα κενό ανάμεσα στα 
επιμέρους ορίσματα. 


- Με το πέρας αυτής της διαδικασίας υπάρχουν οι εντολές και τα ορίσματά τους στον tokens_command[][]  με ένα
κενό ανάμεσά τους. 

- Η μεταβλητή d στο τέλος της επανάληψης μας δίνει τον αριθμό των tokens που δεν είναι κενά.

- Γίνεται μια επανάληψη μέχρι d, για το συνολικό αριθμό των μη κενών tokens.

- Δηλώνονται οι **args,**args1.
---> Στον args[][] αποθηκεύονται αρχικά, για το κάθε token, η εντολή στην πρώτη γραμμή και τα ορίσματα στη 
δεύτερη. Είναι πίνακας 170*200 για τον ίδιο λόγο με τους πίνακες tokens[][],tokens_command[][]. 
---> Στον args1[][] αποθηκεύονται τα στοιχεία του args[][] περνώντας μέσα από έναν ακόμα έλεγχο εγκυρότητας
των αποτελεσμάτων. 

- Από τον args[][] στον args1[][] περνούν strings μέσω της strtok() με delimeter το SPACE " ". Υπάρχει 
έλεγχος εάν στο τελευταίο όρισμα του args[][] υπάρχει white χαρακτήρας (επειδή δεν λήφθηκε υπόψη σωστά
την πρώτη φορά) και δεσμεύεται η απαραίτητη μνήμη για τις γραμμές του args1[][] (ακριβώς όσα είναι και τα 
ορίσματα).

-Εκτέλεση με -execvp-. Σε όλες τις πηγές που βρήκα από το διαδίκτυο η execvp είναι απαραίτητο να τερματίζει 
με
NULL Pointer. Ωστόσο, στο δικό μου μηχάνημα δεν δούλευε και γι'αυτό παραλήφθηκε. 

- Τέλος, μετά τον έλεγχο ύπαρξης της -quit- κανονικά πρέπει να απελευθερώνεται η μνήμη με την free().
Ωστόσο, παρατηρήθηκε ότι όταν απελευθερώνεται ο δεσμευμένος χώρος για την args1[][] το πρόγραμμα δεν 
λειτουργεί σωστά καθώς η μνήμη δεν απελευθερώνεται. Εάν δεν χρησιμοποιηθεί free() ο κώδικας λειτουργεί για 
κάθε εντολή. 



----INTERACTIVE MODE----


-Στο Interactive Mode o ο κώδικας με κάποιες αλλαγές είναι πανομοιότυπος με αυτόν που μόλις περιγράφηκε.
Επομένως, εδώ θα παρατεθούν μόνον οι αλλαγές που έγιναν.

- Προφανώς, δε γίνεται έλεγχος ύπαρξης αρχείου. 

- Χρησιμοποιείται ένας ατέρμονος βρόχος για την εισαγωγή των εντολών.




